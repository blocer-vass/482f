#!groovy
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-agent-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi",
      resourceRequestCpu: "1",
      resourceLimitCpu: "2"
    )
  ]
) {
  node('skopeo-pod') {
    // Define Maven Command to point to the correct
    // settings for our Nexus installation
    def mvnCmd = "mvn -s ../nexus_settings.xml"

    // Checkout Source Code.
    stage('Checkout Source') {
      checkout scm
    }

    // Build the Tasks Service
    dir('openshift-tasks') {
      // The following variables need to be defined at the top level
      // and not inside the scope of a stage - otherwise they would not
      // be accessible from other stages.
      // Extract version from the pom.xml
      def version = getVersionFromPom("pom.xml")

      // TBD Set the tag for the development image: version + build number
      def devTag  = version + '-' + currentBuild.number
      // Set the tag for the production image: version
      def prodTag = version

      //projects
      def devProject=GUID+'-tasks-dev'
      def prodProject=GUID+'-tasks-prod'

      //application's dates
      def app='tasks'
      def appWar='openshift-tasks.war'

      // Using Maven build the war file
      // Do not run tests in this step
	stage('Build war') {
        	echo "Building version ${devTag}"

        	sh """
			${mvnCmd} clean package -DskipTest=true
		"""
	}

      // TBD: The next two stages should run in parallel
      parallel (
	runingTest: {
      		// Using Maven run the unit tests
      		stage('Unit Tests') {
        		echo "Running Unit Tests"

        		// TBD: Execute Unit Tests
			sh """
				${mvnCmd} test
			"""
			step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
      		}
	},
	codeAnalysis: {	

		// Using Maven to call SonarQube for Code Analysis
      		stage('Code Analysis') {
        		echo "Running Code Analysis"

        		// TBD: Execute Sonarqube Tests
			sh """
				${mvnCmd} sonar:sonar \
				-Dsonar.host.url=http://sonarqube-gpte-hw-cicd.apps.na311.openshift.opentlc.com \
            			-Dsonar.projectName=${JOB_BASE_NAME} \
				-Dsonar.projectVersion=${devTag}
			"""
      		}
      })

      // Publish the built war file to Nexus
      stage('Publish to Nexus') {
        	echo "Publish to Nexus"

        	// TBD: Publish to Nexus
		sh """
			${mvnCmd} deploy \
			-DskipTests=true \
			-DaltDeploymentRepository=nexus::default::http://nexus3-gpte-hw-cicd.apps.na311.openshift.opentlc.com/repository/releases
		"""
      }

      // Build the OpenShift Image in OpenShift and tag it.
      stage('Build and Tag OpenShift Image') {
        echo "Building OpenShift container image tasks:${devTag}"

        // TBD: Build Image, tag Image
	openshift.withCluster(){
		openshift.withProject(devProject){
			openshift.selector('bc',app).startBuild('--from-file=target/'+appWar, "--wait=true")
        		openshift.tag(app+':latest', app+':'+devTag)
		}
	}
      }

      // Deploy the built image to the Development Environment.
      stage('Deploy to Dev') {
        echo "Deploying container image to Development Project"

        // TBD: Deploy to development Project
        //      Set Image, Set VERSION
        //      Make sure the application is running and ready before proceeding
	
	openshift.withCluster(){
		openshift.withProject(devProject){
			//Set image & version
			openshift.set('image', 'dc/'+app, app+'=docker-registry.default.svc:5000/'+devProject+'/'+app+':'+devTag)
			openshift.set('env', 'dc/'+app, 'VERSION='+devTag)
			
			openshift.selector('configmap', app+'-config').delete()
			configmap = openshift.create('configmap',app+'-config', '--from-file=./configuration/application-users.properties', '--from-file=./configuration/application-roles.properties' )

			openshift.set('env', 'dc/'+app, '--from=configmap/'+app+'-config --overwrite')
			//deploy the image

			openshift.selector('dc',app).rollout().latest()
			//control the application is running
			dc=openshift.selector('dc',app).object()
			dc_version = dc.status.latestVersion
			rc = openshift.selector('rc', app+'-'+dc_version)
				
			echo "Waiting 10 minutes for ReplicationController ${app}-${dc_version} to be ready"
			timeout (time: 10, unit: 'MINUTES') {
                        	rc.untilEach(1){
                                    def rcMap = it.object()
                                    return (rcMap.status.replicas.equals(rcMap.status.readyReplicas))
				}
			}
		}
	}
      }

      // Copy Image to Nexus container registry
      stage('Copy Image to Nexus container registry') {
        echo "Copy image to Nexus container registry"


	// TBD: Copy image to Nexus container registry
        sh """
                skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds=openshift:\$(oc whoami -t) --dest-creds=admin:redhat \
                docker://docker-registry.default.svc:5000/${devProject}/${app}:${devTag} \
                docker://nexus3-registry.gpte-hw-cicd.svc.cluster.local:5000/${app}:${devTag}
        """

        // TBD: Tag the built image with the production tag.
	openshift.withCluster(){
                openshift.withProject(devProject){
			openshift.tag(devProject+'/'+app+':'+devTag , prodProject+'/'+app+':'+prodTag)
		}
	}
      }

      // Blue/Green Deployment into Production
      // -------------------------------------
      def destApp   = app+'-green'
      def activeApp = ""

      stage('Blue/Green Production Deployment') {
        // TBD: Determine which application is active
        //      Set Image, Set VERSION
        //      Deploy into the other application
        //      Make sure the application is running and ready before proceeding
	
	openshift.withCluster() {
        	openshift.withProject(prodProject) {
          		activeApp = openshift.selector('route', app).object().spec.to.name
          		if (activeApp == app+'-green') {
            			destApp = app+'-blue'
          		}
			
			dc = openshift.selector('dc/'+destApp).object()
			dc.spec.template.spec.containers[0].image='docker-registry.default.svc:5000/'+devProject+'/'+app+':'+prodTag
          		openshift.apply(dc)
			
			openshift.selector('configmap', destApp+'-config').delete()
                        configmap = openshift.create('configmap',destApp+'-config', '--from-file=./configuration/application-users.properties', '--from-file=./configuration/application-roles.properties' )
			
			openshift.set('env', 'dc/'+destApp, '--from=configmap/'+destApp+'-config --overwrite')

			openshift.selector('dc', destApp).rollout().latest();

			//control the application is running
                        dc=openshift.selector('dc',destApp).object()
                        dc_version = dc.status.latestVersion
                        rc = openshift.selector('rc', destApp+'-${dc_version}')

                        echo "Waiting 10 minutes for ReplicationController ${app}-${dc_version} to be ready"
                        timeout (time: 10, unit: 'MINUTES') {
                                rc.untilEach(1){
                                    def rcMap = it.object()
                                    return (rcMap.status.replicas.equals(rcMap.status.readyReplicas))
                                }
                        }

      		}
	}
      }
      stage('Switch over to new Version') {
        echo "Switching Production application to ${destApp}."
        // TBD: Execute switch
	openshift.withCluster() {
        	openshift.withProject(prodProject) {
          		route = openshift.selector('route/'+app).object()
          		route.spec.to.name=destApp
          		openshift.apply(route)
		}
	}
      }
    }
  }
}

// Convenience Functions to read version from the pom.xml
// Do not change anything below this line.
// --------------------------------------------------------
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
